// <auto-generated />
using System;
using BarberServerApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BarberServerApi.Migrations
{
    [DbContext(typeof(My_Graduation_Project_DBContext))]
    partial class My_Graduation_Project_DBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BarberServerApi.Models.Barber", b =>
                {
                    b.Property<int>("BarberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BarberShowName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CertificationImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CommentsId")
                        .HasColumnType("int");

                    b.Property<int?>("ContactInfoId")
                        .HasColumnType("int");

                    b.Property<int?>("PersonnelId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkingHoursId")
                        .HasColumnType("int");

                    b.HasKey("BarberId");

                    b.HasIndex("PersonnelId");

                    b.ToTable("Barber");
                });

            modelBuilder.Entity("BarberServerApi.Models.Comments", b =>
                {
                    b.Property<int>("CommentsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BarberId")
                        .HasColumnType("int");

                    b.Property<string>("Comments1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntityPostId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CommentsId");

                    b.HasIndex("BarberId");

                    b.HasIndex("EntityPostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("BarberServerApi.Models.ContactInfo", b =>
                {
                    b.Property<int>("ContactInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BarberId")
                        .HasColumnType("int");

                    b.Property<int?>("DistrictId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("StreetAvenueName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContactInfoId");

                    b.HasIndex("BarberId")
                        .IsUnique()
                        .HasFilter("[BarberId] IS NOT NULL");

                    b.HasIndex("DistrictId");

                    b.ToTable("ContactInfo");
                });

            modelBuilder.Entity("BarberServerApi.Models.District", b =>
                {
                    b.Property<int>("DistrictId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContactInfoId")
                        .HasColumnType("int");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NeighborhoodId")
                        .HasColumnType("int");

                    b.HasKey("DistrictId");

                    b.HasIndex("NeighborhoodId");

                    b.ToTable("District");
                });

            modelBuilder.Entity("BarberServerApi.Models.EntityPost", b =>
                {
                    b.Property<int>("EntityPostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BarberId")
                        .HasColumnType("int");

                    b.Property<int>("CommentsId")
                        .HasColumnType("int");

                    b.Property<string>("EntityImgVideoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityPostText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityPostTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LikesId")
                        .HasColumnType("int");

                    b.HasKey("EntityPostId");

                    b.HasIndex("BarberId");

                    b.ToTable("EntityPost");
                });

            modelBuilder.Entity("BarberServerApi.Models.Likes", b =>
                {
                    b.Property<int>("LikesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EntityPostId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("likes")
                        .HasColumnType("int");

                    b.HasKey("LikesId");

                    b.HasIndex("EntityPostId");

                    b.HasIndex("UserId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("BarberServerApi.Models.Neighborhood", b =>
                {
                    b.Property<int>("NeighborhoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("NeighborhoodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.HasKey("NeighborhoodId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Neighborhood");
                });

            modelBuilder.Entity("BarberServerApi.Models.PayingOff", b =>
                {
                    b.Property<int>("PayingOffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("PayingTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ReservationBarberId")
                        .HasColumnType("int");

                    b.Property<int>("paid")
                        .HasColumnType("int");

                    b.HasKey("PayingOffId");

                    b.ToTable("PayingOff");
                });

            modelBuilder.Entity("BarberServerApi.Models.Personnel", b =>
                {
                    b.Property<int>("PersonnelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PersonelGender")
                        .HasColumnType("int");

                    b.Property<string>("PersonnelImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonnelMaill")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonnelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonnelPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonnelPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonnelSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("barberId")
                        .HasColumnType("int");

                    b.Property<int?>("userId")
                        .HasColumnType("int");

                    b.HasKey("PersonnelId");

                    b.ToTable("Personnel");
                });

            modelBuilder.Entity("BarberServerApi.Models.Province", b =>
                {
                    b.Property<int>("ProvinceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("NeighborhoodId")
                        .HasColumnType("int");

                    b.Property<string>("ProvinceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProvinceId");

                    b.ToTable("Province");
                });

            modelBuilder.Entity("BarberServerApi.Models.ReservationBarber", b =>
                {
                    b.Property<int>("ReservationBarberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BarberId")
                        .HasColumnType("int");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<int>("Hour")
                        .HasColumnType("int");

                    b.Property<int>("Min")
                        .HasColumnType("int");

                    b.Property<int?>("PayingOffId")
                        .HasColumnType("int");

                    b.Property<string>("ReservationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("reservationStatus")
                        .HasColumnType("bit");

                    b.HasKey("ReservationBarberId");

                    b.HasIndex("BarberId");

                    b.HasIndex("PayingOffId");

                    b.HasIndex("UserId");

                    b.ToTable("ReservationBarber");
                });

            modelBuilder.Entity("BarberServerApi.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CommentslId")
                        .HasColumnType("int");

                    b.Property<int?>("PersonnelId")
                        .HasColumnType("int");

                    b.Property<int?>("ReservationBarberId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("yas")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("PersonnelId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("BarberServerApi.Models.WorkingHours", b =>
                {
                    b.Property<int>("WorkingHoursId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BarberId")
                        .HasColumnType("int");

                    b.Property<int>("OpeningTime")
                        .HasColumnType("int");

                    b.Property<string>("WorkingDaysOfWeek")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkingHoursOfDay")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkingMinOfHours")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("closingTime")
                        .HasColumnType("int");

                    b.HasKey("WorkingHoursId");

                    b.HasIndex("BarberId")
                        .IsUnique();

                    b.ToTable("WorkingHours");
                });

            modelBuilder.Entity("BarberServerApi.Models.Barber", b =>
                {
                    b.HasOne("BarberServerApi.Models.Personnel", "Personnel")
                        .WithMany("Barber")
                        .HasForeignKey("PersonnelId");

                    b.Navigation("Personnel");
                });

            modelBuilder.Entity("BarberServerApi.Models.Comments", b =>
                {
                    b.HasOne("BarberServerApi.Models.Barber", null)
                        .WithMany("Comments")
                        .HasForeignKey("BarberId");

                    b.HasOne("BarberServerApi.Models.EntityPost", "EntityPost")
                        .WithMany("Comments")
                        .HasForeignKey("EntityPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BarberServerApi.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityPost");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BarberServerApi.Models.ContactInfo", b =>
                {
                    b.HasOne("BarberServerApi.Models.Barber", "Barber")
                        .WithOne("ContactInfo")
                        .HasForeignKey("BarberServerApi.Models.ContactInfo", "BarberId");

                    b.HasOne("BarberServerApi.Models.District", "District")
                        .WithMany("ContactInfo")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Barber");

                    b.Navigation("District");
                });

            modelBuilder.Entity("BarberServerApi.Models.District", b =>
                {
                    b.HasOne("BarberServerApi.Models.Neighborhood", "Neighborhood")
                        .WithMany("District")
                        .HasForeignKey("NeighborhoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Neighborhood");
                });

            modelBuilder.Entity("BarberServerApi.Models.EntityPost", b =>
                {
                    b.HasOne("BarberServerApi.Models.Barber", "Barber")
                        .WithMany()
                        .HasForeignKey("BarberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Barber");
                });

            modelBuilder.Entity("BarberServerApi.Models.Likes", b =>
                {
                    b.HasOne("BarberServerApi.Models.EntityPost", "EntityPost")
                        .WithMany("Likes")
                        .HasForeignKey("EntityPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BarberServerApi.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityPost");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BarberServerApi.Models.Neighborhood", b =>
                {
                    b.HasOne("BarberServerApi.Models.Province", "Province")
                        .WithMany("Neighborhood")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("BarberServerApi.Models.ReservationBarber", b =>
                {
                    b.HasOne("BarberServerApi.Models.Barber", "Barber")
                        .WithMany("ReservationBarber")
                        .HasForeignKey("BarberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BarberServerApi.Models.PayingOff", "PayingOff")
                        .WithMany("ReservationBarber")
                        .HasForeignKey("PayingOffId");

                    b.HasOne("BarberServerApi.Models.User", "User")
                        .WithMany("ReservationBarber")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Barber");

                    b.Navigation("PayingOff");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BarberServerApi.Models.User", b =>
                {
                    b.HasOne("BarberServerApi.Models.Personnel", "Personnel")
                        .WithMany("User")
                        .HasForeignKey("PersonnelId");

                    b.Navigation("Personnel");
                });

            modelBuilder.Entity("BarberServerApi.Models.WorkingHours", b =>
                {
                    b.HasOne("BarberServerApi.Models.Barber", "Barber")
                        .WithOne("WorkingHours")
                        .HasForeignKey("BarberServerApi.Models.WorkingHours", "BarberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Barber");
                });

            modelBuilder.Entity("BarberServerApi.Models.Barber", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("ContactInfo");

                    b.Navigation("ReservationBarber");

                    b.Navigation("WorkingHours");
                });

            modelBuilder.Entity("BarberServerApi.Models.District", b =>
                {
                    b.Navigation("ContactInfo");
                });

            modelBuilder.Entity("BarberServerApi.Models.EntityPost", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("BarberServerApi.Models.Neighborhood", b =>
                {
                    b.Navigation("District");
                });

            modelBuilder.Entity("BarberServerApi.Models.PayingOff", b =>
                {
                    b.Navigation("ReservationBarber");
                });

            modelBuilder.Entity("BarberServerApi.Models.Personnel", b =>
                {
                    b.Navigation("Barber");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BarberServerApi.Models.Province", b =>
                {
                    b.Navigation("Neighborhood");
                });

            modelBuilder.Entity("BarberServerApi.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("ReservationBarber");
                });
#pragma warning restore 612, 618
        }
    }
}
